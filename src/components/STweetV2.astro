---
import { format } from "date-fns"

/*
  =======
  Based on...
  - https://github.com/hugomd/blog/blob/6ad96b24117255c2a9912c566ffd081bd9bbd6f1/layouts/shortcodes/statictweet.html
  - https://hugo.md/post/update-rendering-static-tweets/
  - https://github.com/KyleMit/eleventy-plugin-embed-tweet
  - https://www.stackbit.com/blog/advanced-hugo-templates/
  - https://github.com/rebelchris/astro-static-tweet/blob/master/StaticTweet.astro
  =======
*/

const { TweetID } = Astro.props

const BearerToken = import.meta.env.PUBLIC_BEARER_TOKEN
const jsonURL1 = "https://api.twitter.com/2/tweets?ids="
const jsonURL2 = "&expansions=author_id,attachments.media_keys&tweet.fields=created_at,text,attachments,entities,source&user.fields=name,username,profile_image_url&media.fields=preview_image_url,type,url,alt_text"

const response = await fetch(jsonURL1 + TweetID + jsonURL2, {
  method: "get",
  headers: {
    "Authorization": `Bearer ${BearerToken}`
  }
})
const Json = await response.json()
const JsonData = Json.data[0]
const JsonIncludes = Json.includes

let text = ''; let created_at = ''; let profile_image_url = ''; let name = ''; let username = ''

name = JsonIncludes.users[0].name
username = JsonIncludes.users[0].username
profile_image_url = JsonIncludes.users[0].profile_image_url
created_at = JsonData.created_at

text = JsonData.text

if (JsonData.entities.urls) {
  JsonData.entities.urls.forEach((url) => {
    if (!url.images) {
      if (!url.unwound_url) {
        if (url.display_url.includes ("buff.ly")) {
          text = text.replace(
            url.url,
            `<a href=${url.url} target="_blank" rel="noopener">${url.display_url}</a>`
          )
        } else {
          text = text.replace(
            url.url,
            ``
          )
        }
      } else {
        text = text.replace(
          url.url,
          `<a href=${url.url} target="_blank" rel="noopener">${url.display_url}</a>`
        )
      }
    } else {
      text = text.replace(
        url.url,
        `<a href=${url.url} target="_blanl" rel="noopener">${url.display_url}</a>`)
    }
  })
}

if (JsonData.entities.mentions) {
  JsonData.entities.mentions.forEach((mention) => {
    text = text.replace(
      `@${mention.username}`,
      `<a target="_blank" rel="noreferrer noopener" href="https://twitter.com/${mention.username}">@${mention.username}</a>`
    )
  })
}

if (JsonData.entities.hashtags) {
  JsonData.entities.hashtags.forEach((hashtag) => {
    text = text.replace(
      `#${hashtag.tag}`,
      `<a target="_blank" rel="noreferrer noopener" href="https://twitter.com/hashtag/${hashtag.tag}?src=hash&ref_src=twsrc">#${hashtag.tag}</a>`
    )
  })
}

text = text.replace(/(?:\r\n|\r|\n)/g, '<br/>')

let imageItems = ''

if (JsonIncludes.media) {
  JsonIncludes.media.forEach((item) => {
    if (item.url) {
      imageItems = imageItems + `<img class="tweet-img" src=${item.url} alt="" /><br />`
    }
  })
}

---

<blockquote class="tweet-card">
  <div class="tweet-header">
    <a class="tweet-profile" href=`https://twitter.com/${username}` target="_blank" rel="noopener">
      <img src={profile_image_url} alt=`Twitter avatar for ${username}` />
    </a>
    <div class="tweet-author">
      <a class="tweet-author-name" href=`https://twitter.com/${username}` target="_blank" rel="noopener">{name}</a>
      <a class="tweet-author-handle" href=`https://twitter.com/${username}` target="_blank" rel="noopener">@{username}</a>
    </div>
  </div>
  <p class="tweet-body" set:html={text} />
  <span set:html={imageItems} />
  <div class="tweet-footer">
    <a href=`https://twitter.com/${username}/status/${TweetID}` class="tweet-date" target="_blank" rel="noopener">{format(new Date(created_at), "MMMM d, yyyy â€¢ h:mm aa")}</a>&nbsp;<span class="legal">(UTC)</span>
  </div>
</blockquote>
